{"ast":null,"code":"import * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../fetch-data/fetch-data.service\";\nconst _c0 = [\"candlestickChart\"];\nexport let CandlestickChartComponent = /*#__PURE__*/(() => {\n  class CandlestickChartComponent {\n    constructor(_fetchDataService) {\n      this._fetchDataService = _fetchDataService;\n      this.candleFill = \"green\";\n      this.leftCrosshairWidth = 0;\n      this.rightCrosshairWidth = 0;\n      this.topCrosshairHeight = 0;\n      this.bottomCrosshairHeight = 0;\n      this.mouseWidthOffset = 30;\n      this.mouseHeightOffset = 30;\n      this.mouseTopBias = 5.5;\n      this.mouseLeftBias = 1.5;\n      this.showCrossHair = false;\n      this.mouseOnChart = true;\n      this.margin = {\n        top: 10,\n        bottom: 40,\n        left: 30,\n        right: 80\n      };\n      this.dateFormat = \"%Y-%m-%d\";\n      this.onInint = true;\n      this.xFormat = \"%b %-d\";\n      this.xPadding = 0.5;\n      this.transitionDuration = 300;\n      this.defaultWidth = 1000;\n      this.defaultHeight = 900;\n    }\n\n    ngOnInit() {}\n\n    ngAfterViewInit() {\n      var _a;\n\n      this.svg = d3.select((_a = this.candlestickChart) === null || _a === void 0 ? void 0 : _a.nativeElement);\n      this.setElementDimensions(window.innerHeight, window.innerWidth);\n      this.dataSubscription = this._fetchDataService._teslaHistoricDataSource.subscribe(data => {\n        this.data = data;\n        var dateFormat = d3.utcParse(this.dateFormat);\n\n        for (var i = 0; i < this.data.length; i++) {\n          var dateString = this.data[i].date;\n          this.data[i].date = dateFormat(dateString);\n        }\n\n        this.drawChart(this.data, this.onInint);\n      });\n    }\n\n    ngOnDestroy() {\n      this.dataSubscription.unsubscribe();\n    }\n\n    onResize(event) {\n      this.setElementDimensions(window.innerHeight, window.innerWidth);\n      this.resizeChart();\n    }\n\n    innerWidth(defaultWidth) {\n      if (this.candlestickChart) {\n        return this.candlestickChart.nativeElement.clientWidth - this.margin.left - this.margin.right;\n      } else {\n        return defaultWidth;\n      }\n    }\n\n    innerHeight(defaultHeight) {\n      if (this.candlestickChart) {\n        return this.candlestickChart.nativeElement.clientHeight - this.margin.top - this.margin.bottom;\n      } else {\n        return defaultHeight;\n      }\n    }\n\n    setElementDimensions(windowHeight, windowWidth) {\n      var rect = this.candlestickChart.nativeElement.getBoundingClientRect();\n      let setHeight = windowHeight - rect.top;\n      let setWidth = windowWidth - rect.left;\n      this.candlestickChart.nativeElement.style.height = setHeight + 'px';\n      this.candlestickChart.nativeElement.style.width = setWidth + 'px';\n    }\n\n    setMaxValue(data, property) {\n      return d3.max(data.map(r => r[property]));\n    }\n\n    setMinValue(data, property) {\n      return d3.min(data.map(r => r[property]));\n    }\n\n    drawChart(data, init) {\n      this.xMin = this.setMinValue(data, \"date\");\n      this.xMax = this.setMaxValue(data, \"date\");\n      this.xRange = [0, this.innerWidth(this.defaultWidth)];\n      this.xDomain = this.weekdaysScale(this.xMin, this.xMax, 1);\n      this.xScale = d3.scaleBand(this.xDomain, this.xRange).padding(this.xPadding);\n      this.xTicks = this.weeksScale(d3.min(this.xDomain), d3.max(this.xDomain), 2);\n      this.xAxis = d3.axisBottom(this.xScale).tickFormat(d3.utcFormat(this.xFormat)).tickValues(this.xTicks);\n      var minP = +this.setMinValue(data, \"low\");\n      var maxP = +this.setMaxValue(data, \"high\");\n      var buffer = (maxP - minP) * 0.1;\n      this.yMin = minP - buffer;\n      this.yMax = maxP + buffer;\n      this.filteredData = data;\n      this.yScale = d3.scaleLinear().domain([this.yMin, this.yMax]).range([this.innerHeight(this.defaultHeight), 0]).nice();\n      this.yMin = this.yScale.domain()[0];\n      this.yMax = this.yScale.domain()[1];\n      this.yAxis = d3.axisRight(this.yScale).tickFormat(d3.format(\",.2f\"));\n\n      if (!init) {\n        this.svg.select('#xAxis').transition().duration(this.transitionDuration).delay(this.transitionDuration).attr('transform', `translate(${this.margin.left},${this.innerHeight(this.defaultHeight) + this.margin.top})`).call(d3.axisBottom(this.xScale).tickFormat(d3.utcFormat(this.xFormat)).tickValues(this.xTicks)).selectAll(\"path, line\").attr(\"stroke\", 'azure');\n        this.svg.select('#yAxis').transition().duration(this.transitionDuration).delay(this.transitionDuration).attr('transform', `translate(${this.innerWidth(this.defaultWidth) + this.margin.left}, ${this.margin.top})`).call(d3.axisRight(this.yScale).tickFormat(d3.format(\",.2f\"))).selectAll(\"path, line\").attr(\"stroke\", 'azure');\n        this.svg.selectAll(\"text\").transition().duration(this.transitionDuration).delay(this.transitionDuration).attr(\"fill\", 'azure');\n      } else {\n        this.svg.append(\"rect\").attr(\"id\", \"rect\").attr(\"width\", this.innerWidth(this.defaultWidth)).attr(\"height\", this.innerHeight(this.defaultHeight)).attr(\"transform\", `translate(${this.margin.left}, ${this.margin.top})`).style(\"fill\", \"none\").style(\"pointer-events\", \"all\").attr(\"clip-path\", \"url(#clip)\");\n        this.gX = this.svg.append(\"g\").attr(\"id\", \"xAxis\").attr(\"class\", \"axis x-axis\").attr(\"transform\", `translate(${this.margin.left}, ${this.innerHeight(this.defaultHeight) + this.margin.top})`).call(this.xAxis);\n        this.gY = this.svg.append(\"g\").attr(\"id\", \"yAxis\").attr(\"class\", \"axis y-axis\").attr(\"transform\", `translate(${this.innerWidth(this.defaultWidth) + this.margin.left}, ${this.margin.top})`).call(this.yAxis);\n        this.clipPath = this.svg.append(\"g\").attr(\"class\", \"chartBody\").attr(\"clip-path\", \"url(#clip)\");\n      }\n\n      this.clipPath.selectAll(\".stem\").data(data).join(enter => enter.append(\"line\").attr(\"class\", \"stem\").attr(\"x1\", d => {\n        return this.margin.left + this.xScale(d.date);\n      }).attr(\"x2\", d => {\n        return this.margin.left + this.xScale(d.date);\n      }).attr(\"y1\", d => this.margin.top + this.yScale(d.high)).attr(\"y2\", d => this.margin.top + this.yScale(d.low)).attr(\"stroke\", d => d.open === d.close ? \"silver\" : d.open > d.close ? \"red\" : \"green\"), update => update.attr(\"x1\", d => {\n        return this.margin.left + this.xScale(d.date);\n      }).attr(\"x2\", d => {\n        return this.margin.left + this.xScale(d.date);\n      }).attr(\"y1\", d => this.margin.top + this.yScale(d.high)).attr(\"y2\", d => this.margin.top + this.yScale(d.low)).attr(\"stroke\", d => d.open === d.close ? \"silver\" : d.open > d.close ? \"red\" : \"green\"), exit => exit.attr(\"opacity\", 0).attr(\"height\", 0).transition().duration(this.transitionDuration).remove());\n      this.clipPath.selectAll(\".candle\").data(data).join(enter => enter.append(\"rect\").attr('x', d => this.margin.left + this.xScale(d.date) - this.xScale.bandwidth() / 2).attr(\"class\", \"candle\").attr('y', d => this.margin.top + this.yScale(Math.max(d.open, d.close))).attr('width', this.xScale.bandwidth()).attr('height', d => d.open === d.close ? 1 : this.yScale(Math.min(d.open, d.close)) - this.yScale(Math.max(d.open, d.close))).attr(\"fill\", d => d.open === d.close ? \"silver\" : d.open > d.close ? \"red\" : this.candleFill).attr(\"stroke\", d => d.open === d.close ? \"silver\" : d.open > d.close ? \"red\" : \"green\"), update => update.attr('x', d => this.margin.left + this.xScale(d.date) - this.xScale.bandwidth() / 2).attr('y', d => this.margin.top + this.yScale(Math.max(d.open, d.close))).attr('width', this.xScale.bandwidth()).attr('height', d => d.open === d.close ? 1 : this.yScale(Math.min(d.open, d.close)) - this.yScale(Math.max(d.open, d.close))).attr(\"fill\", d => d.open === d.close ? \"silver\" : d.open > d.close ? \"red\" : this.candleFill).attr(\"stroke\", d => d.open === d.close ? \"silver\" : d.open > d.close ? \"red\" : \"green\"), exit => exit.attr(\"height\", 0).attr(\"opacity\", 0).transition().duration(this.transitionDuration).remove());\n      this.svg.append(\"defs\").append(\"clipPath\").attr(\"id\", \"clip\").append(\"rect\").attr(\"width\", this.innerWidth(this.defaultWidth)).attr(\"height\", this.innerHeight(this.defaultHeight)).attr(\"transform\", `translate(${this.margin.left}, ${this.margin.top})`);\n      this.extent = [[0, 0], [this.innerWidth(this.defaultWidth), this.innerHeight(this.defaultHeight)]];\n      this.zoom = d3.zoom().scaleExtent([1, 100]).translateExtent(this.extent).extent(this.extent).on('zoom', event => this.zoomed(event));\n      this.svg.call(this.zoom);\n    }\n\n    weeksScale(start, stop, stride) {\n      return d3.utcMonday.every(stride).range(start, stop);\n    }\n\n    weekdaysScale(start, stop, addDays) {\n      return d3.utcDays(start, new Date(stop.setDate(stop.getDate() + addDays)), 1).filter(d => d.getUTCDay() !== 0 && d.getUTCDay() !== 6);\n    }\n\n    zoomed(event) {\n      this.xScale = this.xScale.range([0, this.innerWidth(this.defaultWidth)].map(d => event.transform.applyX(d)));\n      this.yScale = this.yScale.range([this.innerHeight(this.defaultHeight), 0].map(d => event.transform.applyY(d)));\n      this.candles = this.clipPath.selectAll(\".candle\");\n      this.candles.transition().ease(d3.easePolyInOut).duration(this.transitionDuration).attr(\"x\", d => this.margin.left + this.xScale(d.date) - this.xScale.bandwidth() / 2).attr(\"width\", this.xScale.bandwidth()).attr(\"y\", d => this.margin.top + this.yScale(Math.max(d.open, d.close))).attr(\"height\", d => d.open === d.close ? 1 : this.yScale(Math.min(d.open, d.close)) - this.yScale(Math.max(d.open, d.close)));\n      this.stems = this.clipPath.selectAll(\".stem\");\n      this.stems.transition().ease(d3.easePolyInOut).duration(this.transitionDuration).attr(\"y1\", d => this.margin.top + this.yScale(d.high)).attr(\"y2\", d => this.margin.top + this.yScale(d.low)).attr(\"x1\", d => this.margin.left + this.xScale(d.date)).attr(\"x2\", d => this.margin.left + this.xScale(d.date));\n      this.svg.selectAll(\".x-axis\").call(this.xAxis);\n      this.svg.selectAll(\".y-axis\").call(this.yAxis);\n    }\n\n    resizeChart() {\n      this.xMin = this.setMinValue(this.filteredData, \"date\");\n      this.xMax = this.setMaxValue(this.filteredData, \"date\");\n      this.xRange = [0, this.innerWidth(this.defaultWidth)];\n      this.xDomain = this.weekdaysScale(this.xMin, this.xMax, 0);\n      this.xScale = d3.scaleBand(this.xDomain, this.xRange).padding(this.xPadding);\n      this.xTicks = this.weeksScale(d3.min(this.xDomain), d3.max(this.xDomain), 2);\n      var minP = +this.setMinValue(this.filteredData, \"low\");\n      var maxP = +this.setMaxValue(this.filteredData, \"high\");\n      var buffer = (maxP - minP) * 0.1;\n      this.yMin = minP - buffer;\n      this.yMax = maxP + buffer;\n      this.yScale = this.yScale.rangeRound([this.innerHeight(this.defaultHeight), 0]);\n      this.yMin = this.yScale.domain()[0];\n      this.yMax = this.yScale.domain()[1];\n      this.svg.select(\"#rect\").transition().duration(0).attr(\"width\", this.innerWidth(this.defaultWidth)).attr(\"height\", this.innerHeight(this.defaultHeight)).attr(\"transform\", `translate(${this.margin.left}, ${this.margin.top})`);\n      this.svg.select(\"#clip rect\").transition().duration(0).attr(\"width\", this.innerWidth(this.defaultWidth)).attr(\"height\", this.innerHeight(this.defaultHeight)).attr(\"transform\", `translate(${this.margin.left}, ${this.margin.top})`);\n      this.svg.select('#xAxis').transition().ease(d3.easePolyInOut).duration(this.transitionDuration).attr('transform', `translate(${this.margin.left},${this.innerHeight(this.defaultHeight) + this.margin.top})`).call(this.xAxis = d3.axisBottom(this.xScale).tickFormat(d3.utcFormat(this.xFormat)).tickValues(this.xTicks)).selectAll(\"path, line\").attr(\"stroke\", 'azure');\n      this.svg.select('#yAxis').transition().ease(d3.easePolyInOut).duration(this.transitionDuration).attr('transform', `translate(${this.innerWidth(this.defaultWidth) + this.margin.left}, ${this.margin.top})`).call(d3.axisRight(this.yScale).tickFormat(d3.format(\",.2f\"))).selectAll(\"path, line\").attr(\"stroke\", 'azure');\n      this.svg.selectAll(\"text\").transition().duration(this.transitionDuration).attr(\"fill\", 'azure');\n      this.candles = this.clipPath.selectAll(\".candle\");\n      this.candles.transition().ease(d3.easePolyInOut).duration(this.transitionDuration).attr(\"x\", d => this.margin.left + this.xScale(d.date) - this.xScale.bandwidth() / 2).attr(\"width\", this.xScale.bandwidth()).attr(\"y\", d => this.margin.top + this.yScale(Math.max(d.open, d.close))).attr(\"height\", d => d.open === d.close ? 1 : this.yScale(Math.min(d.open, d.close)) - this.yScale(Math.max(d.open, d.close)));\n      this.stems = this.clipPath.selectAll(\".stem\");\n      this.stems.transition().ease(d3.easePolyInOut).duration(this.transitionDuration).attr(\"y1\", d => this.margin.top + this.yScale(d.high)).attr(\"y2\", d => this.margin.top + this.yScale(d.low)).attr(\"x1\", d => this.margin.left + this.xScale(d.date)).attr(\"x2\", d => this.margin.left + this.xScale(d.date));\n    }\n\n  }\n\n  CandlestickChartComponent.ɵfac = function CandlestickChartComponent_Factory(t) {\n    return new (t || CandlestickChartComponent)(i0.ɵɵdirectiveInject(i1.FetchDataService));\n  };\n\n  CandlestickChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CandlestickChartComponent,\n    selectors: [[\"candlestick-chart\"]],\n    viewQuery: function CandlestickChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.candlestickChart = _t.first);\n      }\n    },\n    hostBindings: function CandlestickChartComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function CandlestickChartComponent_resize_HostBindingHandler($event) {\n          return ctx.onResize($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 4,\n    vars: 0,\n    consts: [[\"id\", \"candlestickChart\", 1, \"chart\"], [\"candlestickChart\", \"\"]],\n    template: function CandlestickChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Tesla To The Moon\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelement(2, \"svg\", 0, 1);\n      }\n    },\n    styles: [\".chart[_ngcontent-%COMP%]{height:100%;width:100%}.axis[_ngcontent-%COMP%]   path[_ngcontent-%COMP%], .axis[_ngcontent-%COMP%]   line[_ngcontent-%COMP%]{fill:none;stroke:#000;shape-rendering:crispEdges}.axis[_ngcontent-%COMP%]   text[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif;font-size:11px;fill:#000}\"]\n  });\n  return CandlestickChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}